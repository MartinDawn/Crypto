# tonelli_shanks.py
# Tonelli-Shanks implementation to find sqrt(a) mod p (p must be an odd prime).
# Returns one root r (0 <= r < p) such that r^2 ≡ a (mod p), or None if no root exists.
# If a root exists, the other root is p-r.

def legendre_symbol(a, p):
    """Compute the Legendre symbol (a|p) via Euler's criterion."""
    ls = pow(a % p, (p - 1) // 2, p)
    if ls == p - 1:
        return -1
    return ls  # 0 or 1

def tonelli_shanks(a, p):
    """Tonelli-Shanks: solve r^2 ≡ a (mod p). Returns r or None.
       p must be an odd prime.
    """
    a %= p
    if a == 0:
        return 0
    if p == 2:
        return a
    # check quadratic residue
    if legendre_symbol(a, p) != 1:
        return None

    # case p ≡ 3 (mod 4) is easy:
    if p % 4 == 3:
        r = pow(a, (p + 1) // 4, p)
        return r

    # Factor p-1 as q * 2^s with q odd
    s = 0
    q = p - 1
    while q % 2 == 0:
        q //= 2
        s += 1

    # find z which is a quadratic non-residue
    z = 2
    while legendre_symbol(z, p) != -1:
        z += 1

    # initialize
    m = s
    c = pow(z, q, p)
    t = pow(a, q, p)
    r = pow(a, (q + 1) // 2, p)

    # loop
    while True:
        if t == 0:
            return 0
        if t == 1:
            return r
        # find the least i (0 < i < m) such that t^(2^i) == 1
        t2i = t
        i = 0
        for i_check in range(1, m):
            t2i = pow(t2i, 2, p)
            if t2i == 1:
                i = i_check
                break
        if i == 0:
            # shouldn't happen since t != 1 and t != 0
            return None
        # b = c^(2^(m-i-1))
        b = pow(c, 1 << (m - i - 1), p)
        # update
        r = (r * b) % p
        t = (t * pow(b, 2, p)) % p
        c = pow(b, 2, p)
        m = i

if __name__ == "__main__":
    a = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768
    p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161

    r = tonelli_shanks(a, p)
    if r is None:
        print("No square root (a is non-residue mod p).")
    else:
        r2 = p - r
        smaller = min(r, r2)
        larger = max(r, r2)
        print("Roots:", r, r2)
        print("Smaller root:", smaller)
        print("Larger root:", larger)
# Example output:
# Smaller root: 2362339307683048638327773298580489298932137505520500388338271052053734747862351779647314176817953359071871560041125289919247146074907151612762640868199621186559522068338032600991311882224016021222672243139362180461232646732465848840425458257930887856583379600967761738596782877851318489355679822813155123045705285112099448146426755110160002515592418850432103641815811071548456284263507805589445073657565381850521367969675699760755310784623577076440037747681760302434924932113640061738777601194622244192758024180853916244427254065441962557282572849162772740798989647948645207349737457445440405057156897508368531939120
# Larger root: 28169512554311284614348161812907461395482195258388583125795498809297226147214152907614055638917789190356917578259717792167302913007927989841763977292434488782635964253677743342038748567333074043589267896292373028724763808006697707070301035339291758998923066001985927788808579330075671953036025191791621915640175242425390397212674797332132801882880223506177201168864920484993546017284338829512010922075018689505381642887042980971582058343875078178836965895987271392081926458392283354971823611423820865651283490761548053384731721391637064349021755899877224522161311561209530712702153163501623531290150340903913036821041
